import {
  Loader
} from "./chunk-XTT5RWDR.js";
import {
  cnMixFocus
} from "./chunk-OENDNKRY.js";
import {
  getByMap
} from "./chunk-S2TBCIF5.js";
import {
  usePropsHandler
} from "./chunk-ARXLPV4Q.js";
import {
  forwardRefWithAs
} from "./chunk-QTPKDHHA.js";
import {
  useForkRef
} from "./chunk-EDELJFTB.js";
import "./chunk-GRBBAANK.js";
import {
  cn
} from "./chunk-RJM4GFRJ.js";
import {
  _objectWithoutProperties
} from "./chunk-RHFTPQG3.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@consta/uikit/__internal__/src/components/Button/Button.js
var import_react = __toESM(require_react());
import "C:/EquipmentAccounting/web_frontend/node_modules/@consta/uikit/__internal__/src/components/Button/Button.css";
var _excluded = ["size", "view", "width", "form", "iconLeft", "iconRight", "label", "className", "onClick", "disabled", "loading", "type", "tabIndex", "as", "onlyIcon", "iconSize", "formId"];
var buttonPropSize = ["m", "xs", "s", "l"];
var buttonPropSizeDefault = buttonPropSize[0];
var buttonPropView = ["primary", "clear", "ghost", "secondary"];
var buttonPropViewDefault = buttonPropView[0];
var buttonPropWidth = ["default", "full"];
var buttonPropWidthDefault = buttonPropWidth[0];
var buttonPropForm = ["default", "brick", "round", "brickRound", "roundBrick", "brickDefault", "defaultBrick"];
var mapStableForm = { default: "default", defaultClear: "defaultBrick", defaultBrick: "defaultBrick", brick: "brick", brickDefault: "brickDefault", brickClear: "brick", brickRound: "brickRound", round: "round", roundClear: "roundBrick", roundBrick: "roundBrick", clearRound: "brickRound", clearDefault: "brickDefault", clearBrick: "brick", clearClear: "brick" };
var buttonPropFormDefault = buttonPropForm[0];
var COMPONENT_NAME = "Button";
var cnButton = cn("Button");
var sizeMap = { xs: "xs", s: "xs", m: "s", l: "m" };
var sizeMapOnlyIcon = { xs: "xs", s: "s", m: "m", l: "m" };
var Button = forwardRefWithAs(function(a, b) {
  var c = (0, import_react.useRef)(null), d = usePropsHandler(COMPONENT_NAME, a, c), e = d.size, f = void 0 === e ? buttonPropSizeDefault : e, g = d.view, h = void 0 === g ? buttonPropViewDefault : g, i = d.width, j = void 0 === i ? buttonPropWidthDefault : i, k = d.form, l = void 0 === k ? buttonPropFormDefault : k, m = d.iconLeft, n = d.iconRight, o = d.label, p = d.className, q = d.onClick, r = d.disabled, s = d.loading, t = d.type, u = void 0 === t ? "button" : t, v = d.tabIndex, w = d.as, x = void 0 === w ? "button" : w, y = d.onlyIcon, z = d.iconSize, A = d.formId, B = _objectWithoutProperties(d, _excluded), C = (!o || y) && (m || n), D = m, E = n, F = a.title || !!C && o || void 0, G = C ? getByMap(sizeMapOnlyIcon, f, z) : getByMap(sizeMap, f, z);
  return import_react.default.createElement(x, Object.assign({}, B, { onClick: q ? function handleClick(a2) {
    r || s || !q || q(a2);
  } : void 0, form: A, type: u, className: cnButton({ size: f, view: h, width: j, form: mapStableForm[l], loading: s, disabled: r, withIcon: !!m || !!n, onlyIcon: !!C }, [r || s ? void 0 : cnMixFocus(), p]), disabled: r, tabIndex: v, title: F, ref: useForkRef([b, c]) }), C && import_react.default.createElement(C, { className: cnButton("Icon"), size: G }), !C && ((D || E) && o ? import_react.default.createElement(import_react.default.Fragment, null, D && import_react.default.createElement(D, { className: cnButton("Icon", { position: "left" }), size: G }), import_react.default.createElement("span", { className: cnButton("Label") }, o), E && import_react.default.createElement(E, { className: cnButton("Icon", { position: "right" }), size: G })) : o), s && import_react.default.createElement(Loader, { className: cnButton("Loader"), size: "s" }));
});
export {
  Button,
  COMPONENT_NAME,
  buttonPropForm,
  buttonPropFormDefault,
  buttonPropSize,
  buttonPropSizeDefault,
  buttonPropView,
  buttonPropViewDefault,
  buttonPropWidth,
  buttonPropWidthDefault,
  cnButton
};
//# sourceMappingURL=@consta_uikit_Button.js.map
