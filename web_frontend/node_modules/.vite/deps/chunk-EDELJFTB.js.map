{
  "version": 3,
  "sources": ["../../@consta/src/hooks/useForkRef/useForkRef.ts", "../../@consta/src/utils/setRef.ts"],
  "sourcesContent": ["import { useMemo } from 'react';\n\nimport { setRef } from '##/utils/setRef';\n\nexport const forkRef = <T>(\n  refs: (React.Ref<T> | undefined)[],\n): React.RefCallback<T> | null => {\n  if (!refs.length) {\n    return null;\n  }\n  return (refValue) => {\n    for (const ref of refs) {\n      setRef(ref as React.MutableRefObject<T>, refValue);\n    }\n  };\n};\n\nexport const useForkRef = <T>(refs: (React.Ref<T> | undefined)[]) =>\n  useMemo(() => forkRef(refs), [refs]);\n", "import * as React from 'react';\n\ntype Ref<T> = React.RefCallback<T> | React.MutableRefObject<T> | undefined;\n\nexport function setRef<T>(ref: Ref<T>, value: T): void {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    // eslint-disable-next-line no-param-reassign\n    ref.current = value;\n  }\n}\n"],
  "mappings": ";;;;;;;;AAAA,mBAAwB;;;ACIjB,SAASA,OAAUC,GAAaC,GAAgB;AAClC,gBAAf,OAAOD,IACTA,EAAIC,CAAD,IACMD,MAETA,EAAIE,UAAUD;AAEjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ADPM,IAAME,UAAU,SACrBC,GACgC;AAAA,SAC3BA,EAAKC,SAGH,SAACC,GAAa;AAAA,QAAA,GAAA,IAAA,2BACDF,CADC;AAAA,QAAA;AACnB,WAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,GAAA,QAAwB;AAAA,YAAbG,IAAa,EAAA;AACtBC,eAAOD,GAAkCD,CAAnC;MACP;IAHkB,SAAAG,IAAA;AAAA,QAAA,EAAAA,EAAA;IAAA,UAAA;AAAA,QAAA,EAAA;IAAA;EAIpB,IANQ;AAOV;AAEM,IAAMC,aAAa,SAAIN,GAAJ;AAAA,aACxBO,sBAAQ,WAAA;AAAA,WAAMR,QAAQC,CAAD;EAAb,GAAqB,CAACA,CAAD,CAAtB;AADiB;",
  "names": ["setRef", "ref", "value", "current", "forkRef", "refs", "length", "refValue", "ref", "setRef", "a", "useForkRef", "useMemo"]
}
