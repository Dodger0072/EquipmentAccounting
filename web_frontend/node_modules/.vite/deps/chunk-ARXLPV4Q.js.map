{
  "version": 3,
  "sources": ["../../@consta/src/hooks/useFlag/useFlag.ts", "../../@consta/src/components/EventInterceptor/usePropsHandler.tsx", "../../@consta/src/components/EventInterceptor/EventInterceptor.tsx", "../../@consta/src/components/EventInterceptor/propsHandlers/useSelectEventsHandler.tsx", "../../@consta/src/components/EventInterceptor/propsHandlers/useSnackBarEventsHandler.tsx", "../../@consta/src/components/EventInterceptor/propsHandlers/useTextFieldEventsHandler.tsx"],
  "sourcesContent": ["import { useMemo, useState } from 'react';\n\nexport type Flag = [\n  boolean,\n  {\n    on: () => void;\n    off: () => void;\n    toggle: () => void;\n    set: React.Dispatch<React.SetStateAction<boolean>>;\n  },\n];\n\nexport const useFlag = (initial = false): Flag => {\n  const [state, setState] = useState(initial);\n\n  return [\n    state,\n    useMemo(\n      () => ({\n        on: () => setState(true),\n        off: () => setState(false),\n        toggle: () => setState((state) => !state),\n        set: setState,\n      }),\n      [],\n    ),\n  ];\n};\n", "import React from 'react';\n\nimport { EventInterceptorContext } from './EventInterceptor';\nimport { EventInterceptorComponentName } from './types';\n\nexport const usePropsHandler = <PROPS extends {}>(\n  componentName: EventInterceptorComponentName,\n  props: PROPS,\n  ref?: React.Ref<HTMLElement>,\n): PROPS => {\n  const context = React.useContext(EventInterceptorContext);\n\n  if (!context) {\n    return props;\n  }\n\n  const { eventHandler, map } = context;\n  const propsHandler = map[componentName];\n\n  if (!propsHandler) {\n    return props;\n  }\n\n  return propsHandler(props, eventHandler, ref) as PROPS;\n};\n", "import React from 'react';\n\nimport { eventInterceptorMap } from './eventInterceptorMap';\nimport { EventInterceptorComponentName } from './types';\n\nexport type EventInterceptorMap = typeof eventInterceptorMap;\n\nexport type EventInterceptorProps = {\n  component: EventInterceptorComponentName;\n  event?: string;\n  options: {\n    [key: string]: any;\n  };\n};\n\nexport type EventInterceptorHandler =\n  | ((props: EventInterceptorProps) => void)\n  | undefined;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst EventInterceptorContext = React.createContext<\n  | { eventHandler: EventInterceptorHandler; map: EventInterceptorMap }\n  | undefined\n>(undefined);\n\nconst EventInterceptorProvider = ({\n  children,\n  eventHandler,\n  map,\n}: {\n  children: React.ReactNode;\n  eventHandler: EventInterceptorHandler;\n  map: EventInterceptorMap;\n}) => {\n  return (\n    // eslint-disable-next-line react/jsx-no-constructed-context-values\n    <EventInterceptorContext.Provider value={{ eventHandler, map }}>\n      {children}\n    </EventInterceptorContext.Provider>\n  );\n};\n\nexport { EventInterceptorContext, EventInterceptorProvider };\nexport * from './eventInterceptorMap';\n", "import React, { useEffect } from 'react';\n\nimport { useFlag } from '##/hooks/useFlag';\n\nimport {\n  defaultGetItemLabel,\n  SelectProps,\n} from '../../SelectDeprecated/helpers';\nimport { EventInterceptorHandler } from '../EventInterceptor';\n\nexport const useSelectEventsHandler = <PROPS extends SelectProps>(\n  props: PROPS,\n  handler: EventInterceptorHandler,\n  ref: React.RefObject<HTMLDivElement | null>,\n) => {\n  const newProps: PROPS = { ...props };\n  const [valueChanged, setValueChanged] = useFlag();\n\n  useEffect(() => {\n    setValueChanged.on();\n  }, [newProps.value]);\n\n  newProps.onFocus = (...onfocusArgs) => {\n    setValueChanged.off();\n    return props.onFocus?.(...onfocusArgs);\n  };\n\n  newProps.onBlur = (...onBlurArgs) => {\n    const value = {\n      component: 'Select' as const,\n      event: 'change',\n      options: {\n        placeholder: newProps.placeholder,\n        label: newProps.value\n          ? (newProps.getItemLabel ?? defaultGetItemLabel)(newProps.value)\n          : undefined,\n        value: newProps.value,\n        pageURL: window.location.href,\n        DOMRef: ref.current,\n        props: newProps,\n      },\n    };\n    valueChanged && handler!(value);\n    return props.onBlur?.(...onBlurArgs);\n  };\n\n  return newProps;\n};\n", "import React from 'react';\n\nimport { SnackBarItemDefault, SnackBarProps } from '../../SnackBar/types';\nimport { EventInterceptorHandler } from '../EventInterceptor';\n\nexport const useSnackBarEventsHandler = <\n  P extends SnackBarProps<SnackBarItemDefault>,\n>(\n  props: P,\n  handler: EventInterceptorHandler,\n): P => {\n  const newProps: P = { ...props };\n\n  React.useEffect(() => {\n    if (newProps.items.length) {\n      const value = {\n        component: 'SnackBar' as const,\n        event: 'change',\n        options: {\n          pageURL: window.location.href,\n          DOMRef: document.getElementsByClassName('SnackBar')[0],\n          items: newProps.items,\n          props: newProps,\n        },\n      };\n\n      handler!(value);\n    }\n  }, [newProps.items.length]);\n\n  return newProps;\n};\n", "import { IconComponent, IconPropSize } from '@consta/icons/Icon';\nimport React from 'react';\n\nimport { AutoCompete } from '../../../utils/types/AutoComplete';\nimport {\n  TextField,\n  TextFieldPropForm,\n  TextFieldPropId,\n  TextFieldPropName,\n  TextFieldPropOnChange,\n  TextFieldPropSize,\n  TextFieldPropStatus,\n  TextFieldPropValue,\n  TextFieldPropView,\n} from '../../TextField/TextField';\nimport { EventInterceptorHandler } from '../EventInterceptor';\n\nexport type Props = {\n  className?: string;\n  value?: TextFieldPropValue;\n  onChange?: TextFieldPropOnChange;\n  id?: TextFieldPropId;\n  name?: TextFieldPropName;\n  type?: string;\n  disabled?: boolean;\n  cols?: number;\n  maxLength?: number;\n  size?: TextFieldPropSize;\n  view?: TextFieldPropView;\n  form?: TextFieldPropForm;\n  state?: TextFieldPropStatus;\n  onFocus?: React.FocusEventHandler<HTMLElement>;\n  onBlur?: React.FocusEventHandler<HTMLElement>;\n  autoFocus?: boolean;\n  placeholder?: string;\n  leftSide?: string | IconComponent;\n  rightSide?: string | IconComponent;\n  autoComplete?: AutoCompete;\n  max?: number | string;\n  min?: number | string;\n  readOnly?: boolean;\n  required?: boolean;\n  step?: number | string;\n  tabIndex?: number;\n  inputRef?: React.Ref<HTMLTextAreaElement | HTMLInputElement>;\n  ariaLabel?: string;\n  iconSize?: IconPropSize;\n  children?: never;\n};\n\ntype TextFieldProps = Parameters<typeof TextField>[0];\n\nexport const useTextFieldEventsHandler = <P extends TextFieldProps>(\n  props: P,\n  handler: EventInterceptorHandler,\n  ref: React.RefObject<HTMLDivElement>,\n): P => {\n  const [inputChanged, setInputChanged] = React.useState<boolean>(false);\n  const newProps: P = { ...props };\n\n  React.useEffect(() => {\n    setInputChanged(true);\n  }, [newProps.value]);\n\n  newProps.onFocus = (...onfocusArgs) => {\n    setInputChanged(false);\n\n    return props.onFocus?.(...onfocusArgs);\n  };\n\n  newProps.onBlur = (...onBlurArgs) => {\n    const value = {\n      component: 'TextField' as const,\n      event: 'change',\n      options: {\n        placeholder: newProps.placeholder,\n        pageURL: window.location.href,\n        DOMRef: ref.current,\n        value: newProps.value,\n        props: newProps,\n      },\n    };\n    if (inputChanged) {\n      handler!(value);\n    }\n\n    return props.onBlur?.(...onBlurArgs);\n  };\n\n  return newProps;\n};\n"],
  "mappings": ";;;;;;;;;;;AAAA,mBAAkC;AAY3B,IAAMA,UAAU,WAA2B;AAAA,MAA1BC,IAA0B,CAAA,EAAA,IAAA,UAAA,UAAA,UAAA,CAAA,MAAA,WAAA,UAAA,CAAA,GAAA,QACtBC,uBAASD,CAAD,GADc,IAAA,eAAA,GAAA,CAAA,GACzCE,IADyC,EAAA,CAAA,GAClCC,IADkC,EAAA,CAAA;AAGhD,SAAO,CACLD,OACAE,sBACE,WAAA;AAAA,WAAO,EACLC,IAAI,SAAA,KAAA;AAAA,aAAMF,EAAQ,IAAA;IAAd,GACJG,KAAK,SAAA,MAAA;AAAA,aAAMH,EAAQ,KAAA;IAAd,GACLI,QAAQ,SAAA,SAAA;AAAA,aAAMJ,EAAS,SAACD,IAAD;AAAA,eAAW,CAACA;MAAZ,CAAD;IAAd,GACRM,KAAKL,EAJA;EAAP,GAMA,CAAA,CAPK,CAFF;AAYR;;;AC3BD,IAAAM,gBAAkB;;;ACAlB,IAAAC,gBAAkB;;;ACAlB,IAAAC,gBAAiC;;;ACAjC,IAAAC,gBAAkB;;;ACClB,IAAAC,gBAAkB;;;AHDlB,IAoBMC,0BAA0BC,cAAAA,QAAMC,cAAN,MAAA;;;ADfzB,IAAMC,kBAAkB,SAC7BC,GACAC,GACAC,GACU;AACV,MAAMC,IAAUC,cAAAA,QAAMC,WAAWC,uBAAjB;AAEhB,MAAI,CAACH,EACH,QAAOF;AAJC,MAOFM,IAAsBJ,EAAtBI,cAAcC,IAAQL,EAARK,KAChBC,IAAeD,EAAIR,CAAD;AARd,SAULS,IAIEA,EAAaR,GAAOM,GAAcL,CAAtB,IAHVD;AAIV;",
  "names": ["useFlag", "initial", "useState", "state", "setState", "useMemo", "on", "off", "toggle", "set", "import_react", "import_react", "import_react", "import_react", "import_react", "EventInterceptorContext", "React", "createContext", "usePropsHandler", "componentName", "props", "ref", "context", "React", "useContext", "EventInterceptorContext", "eventHandler", "map", "propsHandler"]
}
