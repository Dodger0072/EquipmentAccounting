{
  "version": 3,
  "sources": ["../../@consta/src/components/Sidebar/Sidebar.tsx", "../../@consta/src/hooks/useGlobalKeys/useGlobalKeys.ts"],
  "sourcesContent": ["import './Sidebar.css';\n\nimport React, { useEffect, useRef } from 'react';\nimport { Transition } from 'react-transition-group';\n\nimport {\n  PortalWithTheme,\n  usePortalContext,\n} from '##/components/PortalWithTheme';\nimport { useTheme } from '##/components/Theme/Theme';\nimport { useClickOutside } from '##/hooks/useClickOutside';\nimport { useGlobalKeys } from '##/hooks/useGlobalKeys';\nimport { cnMixScrollBar } from '##/mixs/MixScrollBar';\nimport { cn } from '##/utils/bem';\nimport { AsTagAttribute } from '##/utils/types/AsTags';\nimport { PropsWithHTMLAttributes } from '##/utils/types/PropsWithHTMLAttributes';\n\nconst sidebarPropPosition = ['right', 'bottom', 'left', 'top'] as const;\ntype SidebarPropPosition = typeof sidebarPropPosition[number];\nconst sidebarPropPositionDefault: SidebarPropPosition = sidebarPropPosition[0];\n\nexport const sidebarPropSize = [\n  's',\n  'm',\n  'l',\n  'full',\n  '1/2',\n  '1/3',\n  '1/4',\n  '2/3',\n  '3/4',\n] as const;\n\nexport type SidebarPropSize = typeof sidebarPropSize[number];\nconst sidebarPropSizeDefault: SidebarPropSize = sidebarPropSize[1];\n\ntype SidebarProps = PropsWithHTMLAttributes<\n  {\n    isOpen?: boolean;\n    onClose?: () => void;\n    onOpen?: () => void;\n    hasOverlay?: boolean;\n    onClickOutside?: (event: MouseEvent) => void;\n    onEsc?: (event: KeyboardEvent) => void;\n    position?: SidebarPropPosition;\n    size?: SidebarPropSize;\n    rootClassName?: string;\n    children?: React.ReactNode;\n    container?: HTMLDivElement | undefined;\n    afterClose?: () => void;\n  },\n  HTMLDivElement\n>;\n\ntype SidebarContentProps = {\n  className?: string;\n  children: React.ReactNode;\n};\n\ntype SidebarActionsProps = {\n  className?: string;\n  children: React.ReactNode;\n};\n\nexport const cnSidebar = cn('Sidebar');\n\nconst SidebarContent: React.FC<SidebarContentProps> = ({\n  className,\n  children,\n  ...rest\n}) => (\n  <div\n    className={cnSidebar('Content', [className, cnMixScrollBar()])}\n    {...rest}\n  >\n    {children}\n  </div>\n);\n\nconst SidebarActions: React.FC<SidebarActionsProps> = ({\n  className,\n  children,\n  ...rest\n}) => (\n  <div className={cnSidebar('Actions', [className])} {...rest}>\n    {children}\n  </div>\n);\n\nconst ContextConsumer: React.FC<{\n  onClickOutside?: (event: MouseEvent) => void;\n  ignoreClicksInsideRefs?: ReadonlyArray<React.RefObject<HTMLElement>>;\n  children: React.ReactNode;\n}> = ({ onClickOutside, children, ignoreClicksInsideRefs }) => {\n  const { refs } = usePortalContext();\n\n  useClickOutside({\n    isActive: !!onClickOutside,\n    ignoreClicksInsideRefs: [\n      ...(ignoreClicksInsideRefs || []),\n      ...(refs || []),\n    ],\n    handler: onClickOutside,\n  });\n\n  return children as React.ReactElement;\n};\n\ninterface SidebarComponent\n  extends React.FC<SidebarProps>,\n    AsTagAttribute<'div'> {\n  Content: typeof SidebarContent;\n  Actions: typeof SidebarActions;\n}\n\nexport const Sidebar: SidebarComponent = (props) => {\n  const {\n    isOpen,\n    onClose,\n    onOpen,\n    hasOverlay = true,\n    onClickOutside,\n    onEsc,\n    position = sidebarPropPositionDefault,\n    size = sidebarPropSizeDefault,\n    className,\n    children,\n    container = window.document.body,\n    style,\n    rootClassName,\n    afterClose,\n    ...otherProps\n  } = props;\n\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  const portalRef = useRef<HTMLDivElement>(null);\n\n  const { theme } = useTheme();\n\n  useEffect(() => {\n    if (isOpen) {\n      onOpen?.();\n    } else {\n      onClose?.();\n    }\n  }, [isOpen]);\n\n  useGlobalKeys({\n    Escape: (e) => isOpen && onEsc && onEsc(e),\n  });\n\n  return (\n    <Transition\n      in={isOpen}\n      unmountOnExit\n      timeout={240}\n      nodeRef={portalRef}\n      onExiting={afterClose}\n    >\n      {(animate) => (\n        <PortalWithTheme\n          preset={theme}\n          ref={portalRef}\n          container={container}\n          className={cnSidebar({ position, hasOverlay }, [rootClassName])}\n          style={\n            typeof style?.zIndex === 'number'\n              ? { zIndex: style.zIndex }\n              : undefined\n          }\n        >\n          {hasOverlay && (\n            <div\n              className={cnSidebar('Overlay', { animate })}\n              aria-label=\"Overlay\"\n            />\n          )}\n          <div\n            {...otherProps}\n            style={{\n              ...style,\n              zIndex: undefined,\n            }}\n            className={cnSidebar('Window', { size, position, animate }, [\n              className,\n            ])}\n            ref={ref}\n          >\n            <ContextConsumer\n              onClickOutside={onClickOutside}\n              ignoreClicksInsideRefs={[ref]}\n            >\n              {children}\n            </ContextConsumer>\n          </div>\n        </PortalWithTheme>\n      )}\n    </Transition>\n  );\n};\n\nSidebar.Content = SidebarContent;\nSidebar.Actions = SidebarActions;\n", "import { useEffect, useRef } from 'react';\n\nimport { KeyCode } from '##/utils/types/KeyCode';\n\nexport type KeyHandlers = Partial<\n  Record<KeyCode, (e: KeyboardEvent) => void>\n> & {\n  [key: string]: (e: KeyboardEvent) => void;\n};\n\nexport type EventType = 'keyup' | 'keydown';\n\nexport const useGlobalKeys = (\n  keyHandlers: KeyHandlers,\n  eventType: EventType = 'keyup',\n) => {\n  const keyHandlersRef = useRef<KeyHandlers>({});\n\n  useEffect(() => {\n    keyHandlersRef.current = keyHandlers;\n  }, [keyHandlers]);\n\n  useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      const { current } = keyHandlersRef;\n\n      const userHandler =\n        current[e.code as KeyCode] || current[e.key as KeyCode];\n      userHandler && userHandler(e);\n    };\n\n    document.addEventListener(eventType, handler);\n\n    return () => {\n      document.removeEventListener(eventType, handler);\n    };\n  }, [eventType]);\n};\n"],
  "mappings": "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",
  "names": ["import_react", "useGlobalKeys", "keyHandlers", "eventType", "keyHandlersRef", "useRef", "useEffect", "current", "handler", "e", "userHandler", "code", "key", "document", "addEventListener", "removeEventListener", "sidebarPropPosition", "sidebarPropPositionDefault", "sidebarPropSize", "sidebarPropSizeDefault", "cnSidebar", "cn", "SidebarContent", "className", "children", "rest", "React", "cnMixScrollBar", "SidebarActions", "ContextConsumer", "onClickOutside", "ignoreClicksInsideRefs", "usePortalContext", "refs", "useClickOutside", "isActive", "handler", "Sidebar", "props", "isOpen", "onClose", "onOpen", "hasOverlay", "onEsc", "position", "size", "container", "window", "document", "body", "style", "rootClassName", "afterClose", "otherProps", "ref", "useRef", "portalRef", "useTheme", "theme", "useEffect", "useGlobalKeys", "Escape", "e", "animate", "zIndex", "Content", "Actions"]
}
