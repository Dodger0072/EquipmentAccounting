{
  "version": 3,
  "sources": ["../../@consta/src/icons/Icon/createIconInner.tsx", "../../@consta/src/utils/bem.ts", "../../@consta/src/icons/Icon/helpers.ts", "../../@consta/src/icons/Icon/Icon.tsx", "../../@consta/src/icons/Icon/createSvg.tsx", "../../@consta/src/components/IconsProvider/IconsProvider.tsx", "../../@consta/src/components/IconsProvider/IconsProviderList/IconsProviderList.tsx", "../../@consta/src/components/IconsProvider/IconsProviderIcon/IconsProviderIcon.tsx"],
  "sourcesContent": ["import './Icon.css';\n\nimport {\n  forwardRefWithAs,\n  PropsWithAsAttributes,\n} from '@consta/uikit/__internal__/src/utils/types/PropsWithAsAttributes';\nimport React from 'react';\n\nimport {\n  cnIcon,\n  CreateIconArguments,\n  IconComponent,\n  IconProps,\n  SvgComponent,\n} from './helpers';\nimport { Icon } from './Icon';\n\ntype innerIconProps = PropsWithAsAttributes<IconProps, 'span'>;\n\nexport const createIconInner = (\n  createProps: CreateIconArguments,\n  svgComponent: SvgComponent,\n): IconComponent<'span'> => {\n  const Svg = svgComponent;\n  return forwardRefWithAs<IconProps, 'span'>((props, ref) => {\n    return (\n      <Icon\n        {...(props as innerIconProps)}\n        color={createProps.color}\n        name={createProps.name}\n        ref={ref}\n      >\n        <Svg className={cnIcon('Svg')} size={props.size} />\n      </Icon>\n    );\n  });\n};\n", "import { withNaming } from '@bem-react/classname';\n\nconst reactBemNaming = { n: 'icons--', e: '-', m: '_', v: '_' };\n\nexport const cn = withNaming(reactBemNaming);\n\nexport const withPrefix = (prefix: string) =>\n  withNaming({ ...reactBemNaming, n: prefix + reactBemNaming.n });\n\nexport const cnCanary = withPrefix('canary');\n\nexport const cnDeprecated = withPrefix('deprecated');\n", "import { AsTags } from '@consta/uikit/__internal__/src/utils/types/AsTags';\nimport { ComponentWithAs } from '@consta/uikit/__internal__/src/utils/types/PropsWithAsAttributes';\n\nimport { cn } from '##/utils/bem';\n\nexport const iconPropSize = ['m', 's', 'xs', 'l'] as const;\nexport type IconPropSize = typeof iconPropSize[number];\nexport const iconPropSizeDefault = iconPropSize[0];\n\nexport const iconPropView = [\n  'primary',\n  'alert',\n  'brand',\n  'ghost',\n  'link',\n  'secondary',\n  'success',\n  'warning',\n  'disabled',\n] as const;\nexport type IconPropView = typeof iconPropView[number];\nexport const iconPropViewDefault = iconPropView[0];\n\nexport type IconProps = {\n  view?: IconPropView;\n  size?: IconPropSize;\n};\n\nexport type IconComponent<AS extends AsTags = 'span'> = ComponentWithAs<\n  IconProps,\n  AS\n>;\n\nexport const cnIcon = cn('Icon');\n\nexport const renderTypeDefault = {\n  l: 'default',\n  m: 'default',\n  s: 'default',\n  xs: 'default',\n};\n\nexport type CreateIconRenderType = {\n  l?: 'use' | 'default';\n  m?: 'use' | 'default';\n  s?: 'use' | 'default';\n  xs?: 'use' | 'default';\n};\n\nexport type CreateIconArguments = {\n  l: React.FC<React.SVGProps<SVGSVGElement>>;\n  m: React.FC<React.SVGProps<SVGSVGElement>>;\n  s: React.FC<React.SVGProps<SVGSVGElement>>;\n  xs: React.FC<React.SVGProps<SVGSVGElement>>;\n  name: string;\n  renderType?: CreateIconRenderType;\n  color?: 'mono' | 'multiple';\n};\n\nexport type SvgProps = { size?: IconPropSize } & JSX.IntrinsicElements['svg'];\n\nexport type SvgComponent = React.FC<SvgProps>;\n", "import './Icon.css';\n\nimport { AsTags } from '@consta/uikit/__internal__/src/utils/types/AsTags';\nimport {\n  ComponentWithAs,\n  forwardRefWithAs,\n} from '@consta/uikit/__internal__/src/utils/types/PropsWithAsAttributes';\nimport React from 'react';\n\nimport { cnIcon, IconProps } from './helpers';\n\ntype IconComponent<AS extends AsTags = 'span'> = ComponentWithAs<\n  IconProps & { color?: 'mono' | 'multiple'; name: string },\n  AS\n>;\n\nexport const Icon: IconComponent = forwardRefWithAs<\n  IconProps & { color?: 'mono' | 'multiple'; name: string },\n  'span'\n>((props, ref) => {\n  const {\n    size = 'm',\n    className,\n    view,\n    as = 'span',\n    children,\n    color = 'mono',\n    name,\n    ...otherProps\n  } = props;\n\n  const Tag = as as string;\n\n  return (\n    <Tag\n      {...otherProps}\n      className={cnIcon({ size, view, color }, [name, className])}\n      ref={ref}\n    >\n      {children}\n    </Tag>\n  );\n});\n", "import React, { useContext, useEffect, useMemo } from 'react';\n\nimport { cnIcons, IconsContext } from '##/components/IconsProvider';\n\nimport { CreateIconArguments, renderTypeDefault, SvgProps } from './helpers';\n\nexport const createSvg =\n  (createProps: CreateIconArguments) => (props: SvgProps) => {\n    const { name, renderType = renderTypeDefault } = createProps;\n\n    const { size = 'm', className, ...otherProps } = props;\n\n    const Svg = createProps[size];\n    const { addIcon, removeIcon } = useContext(IconsContext);\n\n    const SvgElement = useMemo(() => {\n      return renderType[size] === 'use' ? Svg({ className }) : null;\n    }, [Svg]);\n\n    const { children: _children, ...svgProps } = SvgElement?.props ?? {};\n\n    useEffect(() => {\n      if (renderType[size] === 'use') {\n        addIcon?.(name, size, SvgElement);\n      }\n    }, [SvgElement, renderType, size]);\n\n    useEffect(() => {\n      return () => {\n        if (renderType[size] === 'use') {\n          removeIcon?.(name, size);\n        }\n      };\n    }, [Svg, renderType, size]);\n\n    if (addIcon && renderType[size] === 'use') {\n      return (\n        <svg {...otherProps} {...svgProps}>\n          <use x=\"0\" y=\"0\" xlinkHref={`#${cnIcons(`${name}_${size}`)}`} />\n        </svg>\n      );\n    }\n    return <Svg className={className} />;\n  };\n", "import './IconsProvider.css';\n\nimport React, { createContext, useMemo, useState } from 'react';\n\nimport { IconProps } from '##/icons/Icon';\nimport { cn } from '##/utils/bem';\n\nimport { IconsProviderList } from './IconsProviderList/IconsProviderList';\n\nexport type Icons = Record<\n  string,\n  { count: number; svg: React.ReactElement | null }\n>;\n\ntype IconsContextAddIcon = (\n  iconName: string,\n  size: IconProps['size'],\n  svg: React.ReactElement | null,\n) => void;\n\ntype IconsContextRemoveIcon = (\n  iconName: string,\n  size: IconProps['size'],\n) => void;\n\ntype IconsContextParams = {\n  addIcon: IconsContextAddIcon | undefined;\n  removeIcon: IconsContextRemoveIcon | undefined;\n};\n\nconst defaultContextValue: IconsContextParams = {\n  addIcon: undefined,\n  removeIcon: undefined,\n};\n\nexport const cnIcons = cn('Icons');\n\nexport const IconsContext =\n  createContext<IconsContextParams>(defaultContextValue);\n\nexport const IconsProvider: React.FC<{\n  children: React.ReactNode;\n  container?: Element;\n}> = ({ children, container = window.document.body }) => {\n  const [icons, setIcons] = useState<Icons>({});\n\n  const value = useMemo(() => {\n    const addIcon: IconsContextAddIcon = (name, size = 'm', svg) => {\n      const key = `${name}_${size}`;\n      setIcons((prev) => ({\n        ...prev,\n        [key]: {\n          count: typeof prev[key] === 'object' ? prev[key].count + 1 : 1,\n          svg,\n        },\n      }));\n    };\n\n    const removeIcon: IconsContextRemoveIcon = (name, size = 'm') => {\n      const key = `${name}_${size}`;\n      setIcons((prev) => {\n        const copyIcons = { ...prev };\n        if (copyIcons[key].count === 1) {\n          delete copyIcons[key];\n        } else {\n          copyIcons[key].count -= 1;\n        }\n        return copyIcons;\n      });\n    };\n\n    return { addIcon, removeIcon };\n  }, []);\n\n  return (\n    <>\n      <IconsContext.Provider value={value}>{children}</IconsContext.Provider>\n      <IconsProviderList icons={icons} container={container} />\n    </>\n  );\n};\n", "import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { cnIcons, Icons } from '../IconsProvider';\nimport { IconsProviderIcon } from '../IconsProviderIcon';\n\ntype Props = {\n  icons: Icons;\n  container: Element;\n};\n\nexport const IconsProviderList: React.FC<Props> = ({ icons, container }) => {\n  return ReactDOM.createPortal(\n    <div className={cnIcons()}>\n      {Object.keys(icons).map((key) => (\n        <IconsProviderIcon element={icons[key].svg} name={key} key={key} />\n      ))}\n    </div>,\n    container,\n  );\n};\n", "import React, { memo } from 'react';\n\nimport { cnIcons } from '../IconsProvider';\n\ntype Props = {\n  element: React.ReactElement | null;\n  name: string;\n};\n\nexport const IconsProviderIcon = memo(\n  ({ element, name }: Props) => {\n    if (!element) {\n      return null;\n    }\n\n    return (\n      <svg key={cnIcons(name)}>\n        <symbol id={`${cnIcons(name)}`}>{element.props.children}</symbol>\n      </svg>\n    );\n  },\n  ({ name: namePrev }, { name: nameNext }) => namePrev === nameNext,\n);\n"],
  "mappings": "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",
  "names": ["import_react", "reactBemNaming", "n", "e", "m", "v", "cn", "withNaming", "withPrefix", "prefix", "cnCanary", "cnDeprecated", "iconPropSize", "iconPropSizeDefault", "iconPropView", "iconPropViewDefault", "cnIcon", "cn", "renderTypeDefault", "l", "m", "s", "xs", "Icon", "forwardRefWithAs", "props", "ref", "size", "className", "view", "as", "children", "color", "name", "otherProps", "React", "cnIcon", "createIconInner", "createProps", "svgComponent", "forwardRefWithAs", "props", "ref", "React", "color", "name", "cnIcon", "size", "import_react", "import_react", "import_react", "import_react", "IconsProviderIcon", "memo", "element", "name", "React", "cnIcons", "props", "children", "namePrev", "nameNext", "defaultContextValue", "addIcon", "removeIcon", "cnIcons", "cn", "IconsContext", "createContext", "createSvg", "createProps", "props", "name", "renderType", "renderTypeDefault", "size", "className", "otherProps", "_excluded", "Svg", "addIcon", "removeIcon", "useContext", "IconsContext", "SvgElement", "useMemo", "children", "_children", "svgProps", "_excluded2", "useEffect", "React", "cnIcons"]
}
