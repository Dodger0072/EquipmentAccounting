{
  "version": 3,
  "sources": ["../../@consta/src/components/Text/Text.tsx"],
  "sourcesContent": ["import './Text.css';\n\nimport React from 'react';\n\nimport { cn } from '../../utils/bem';\nimport { forwardRefWithAs } from '../../utils/types/PropsWithAsAttributes';\n\nexport const textPropAlign = ['left', 'center', 'right'] as const;\nexport type TextPropAlign = typeof textPropAlign[number];\n\nexport const textPropDisplay = ['block', 'inlineBlock', 'inline'] as const;\nexport type TextPropDisplay = typeof textPropDisplay[number];\n\nexport const textPropFont = ['primary', 'mono'] as const;\nexport type TextPropFont = typeof textPropFont[number];\n\nexport const textPropCursor = ['pointer'] as const;\nexport type TextPropCursor = typeof textPropCursor[number];\n\nexport const textPropDecoration = ['underline'] as const;\nexport type TextPropDecoration = typeof textPropDecoration[number];\n\nexport const textPropLineHeight = ['2xs', 'xs', 's', 'm', 'l'] as const;\nexport type TextPropLineHeight = typeof textPropLineHeight[number];\nexport const textPropLineHeightDefault: TextPropLineHeight = 'm';\n\nexport const textPropSize = [\n  'm',\n  '2xs',\n  'xs',\n  's',\n  'l',\n  'xl',\n  '2xl',\n  '3xl',\n  '4xl',\n  '5xl',\n  '6xl',\n] as const;\nexport type TextPropSize = typeof textPropSize[number];\nexport const textPropSizeDefault: TextPropSize = textPropSize[0];\n\nexport const textPropSpacing = ['xs', 's', 'm', 'l'] as const;\nexport type TextPropSpacing = typeof textPropSpacing[number];\n\nexport const textPropView = [\n  'primary',\n  'secondary',\n  'brand',\n  'ghost',\n  'link',\n  'linkMinor',\n  'system',\n  'normal',\n  'success',\n  'warning',\n  'alert',\n  'caution',\n  'critical',\n] as const;\nexport type TextPropView = typeof textPropView[number];\nexport const textPropViewDefault: TextPropView = textPropView[0];\n\nexport const textPropWeight = [\n  'thin',\n  'light',\n  'regular',\n  'medium',\n  'semibold',\n  'bold',\n  'black',\n] as const;\nexport type TextPropWeight = typeof textPropWeight[number];\n\nexport const textPropFontStyle = ['italic'] as const;\nexport type TextPropFontStyle = typeof textPropFontStyle[number];\n\nexport const textPropTransform = ['uppercase'] as const;\nexport type TextPropTransform = typeof textPropTransform[number];\n\nexport const textPropWidth = ['default'] as const;\nexport type TextPropWidth = typeof textPropWidth[number];\n\nexport type TextProps = {\n  align?: TextPropAlign;\n  cursor?: TextPropCursor;\n  decoration?: TextPropDecoration;\n  display?: TextPropDisplay;\n  font?: TextPropFont;\n  lineHeight?: TextPropLineHeight;\n  size?: TextPropSize;\n  spacing?: TextPropSpacing;\n  fontStyle?: TextPropFontStyle;\n  transform?: TextPropTransform;\n  view?: TextPropView;\n  weight?: TextPropWeight;\n  width?: TextPropWidth;\n  truncate?: boolean;\n};\n\nexport const cnText = cn('Text');\n\nexport const Text = forwardRefWithAs<TextProps>((props, ref) => {\n  const {\n    as = 'div',\n    align,\n    cursor,\n    decoration,\n    display,\n    font,\n    lineHeight,\n    size,\n    spacing,\n    fontStyle,\n    transform,\n    view,\n    weight,\n    width,\n    className,\n    children,\n    truncate,\n    ...otherProps\n  } = props;\n\n  const Tag = as as string;\n\n  return (\n    <Tag\n      {...otherProps}\n      className={cnText(\n        {\n          align,\n          cursor,\n          decoration,\n          display,\n          font,\n          lineHeight,\n          size,\n          spacing,\n          fontStyle,\n          transform,\n          view,\n          weight,\n          width,\n          truncate,\n        },\n        [className],\n      )}\n      ref={ref}\n    >\n      {children}\n    </Tag>\n  );\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAEA,mBAAkB;AAFlB,OAAA;;AAOO,IAAMA,gBAAgB,CAAC,QAAQ,UAAU,OAAnB;AAGtB,IAAMC,kBAAkB,CAAC,SAAS,eAAe,QAAzB;AAGxB,IAAMC,eAAe,CAAC,WAAW,MAAZ;AAGrB,IAAMC,iBAAiB,CAAC,SAAD;AAGvB,IAAMC,qBAAqB,CAAC,WAAD;AAG3B,IAAMC,qBAAqB,CAAC,OAAO,MAAM,KAAK,KAAK,GAAxB;AAE3B,IAAMC,4BAAgD;AAEtD,IAAMC,eAAe,CAC1B,KACA,OACA,MACA,KACA,KACA,MACA,OACA,OACA,OACA,OACA,KAX0B;AAcrB,IAAMC,sBAAoCD,aAAa,CAAD;AAEtD,IAAME,kBAAkB,CAAC,MAAM,KAAK,KAAK,GAAjB;AAGxB,IAAMC,eAAe,CAC1B,WACA,aACA,SACA,SACA,QACA,aACA,UACA,UACA,WACA,WACA,SACA,WACA,UAb0B;AAgBrB,IAAMC,sBAAoCD,aAAa,CAAD;AAEtD,IAAME,iBAAiB,CAC5B,QACA,SACA,WACA,UACA,YACA,QACA,OAP4B;AAWvB,IAAMC,oBAAoB,CAAC,QAAD;AAG1B,IAAMC,oBAAoB,CAAC,WAAD;AAG1B,IAAMC,gBAAgB,CAAC,SAAD;AAoBtB,IAAMC,SAASC,GAAG,MAAD;AAEjB,IAAMC,OAAOC,iBAA4B,SAACC,GAAOC,GAAQ;AAAA,MAAA,IAoB1DD,EAlBFE,IAAAA,IAF4D,WAAA,IAEvD,QAFuD,GAG5DC,IAiBEH,EAjBFG,OACAC,IAgBEJ,EAhBFI,QACAC,IAeEL,EAfFK,YACAC,IAcEN,EAdFM,SACAC,IAaEP,EAbFO,MACAC,IAYER,EAZFQ,YACAC,IAWET,EAXFS,MACAC,IAUEV,EAVFU,SACAC,IASEX,EATFW,WACAC,IAQEZ,EARFY,WACAC,IAOEb,EAPFa,MACAC,IAMEd,EANFc,QACAC,IAKEf,EALFe,OACAC,IAIEhB,EAJFgB,WACAC,IAGEjB,EAHFiB,UACAC,IAEElB,EAFFkB,UACGC,IAnByD,yBAoB1DnB,GApB0D,SAAA;AAwB9D,SACE,aAAAoB,QAAA,cAHUlB,GAGV,OAAA,OAAA,CAAA,GACMiB,GADN,EAEE,WAAWvB,OACT,EACEO,OAAAA,GACAC,QAAAA,GACAC,YAAAA,GACAC,SAAAA,GACAC,MAAAA,GACAC,YAAAA,GACAC,MAAAA,GACAC,SAAAA,GACAC,WAAAA,GACAC,WAAAA,GACAC,MAAAA,GACAC,QAAAA,GACAC,OAAAA,GACAG,UAAAA,EAdF,GAgBA,CAACF,CAAD,CAjBe,GAmBjB,KAAKf,EArBP,CAAA,GAuBGgB,CAvBH;AA0BH,CAnDmC;",
  "names": ["textPropAlign", "textPropDisplay", "textPropFont", "textPropCursor", "textPropDecoration", "textPropLineHeight", "textPropLineHeightDefault", "textPropSize", "textPropSizeDefault", "textPropSpacing", "textPropView", "textPropViewDefault", "textPropWeight", "textPropFontStyle", "textPropTransform", "textPropWidth", "cnText", "cn", "Text", "forwardRefWithAs", "props", "ref", "as", "align", "cursor", "decoration", "display", "font", "lineHeight", "size", "spacing", "fontStyle", "transform", "view", "weight", "width", "className", "children", "truncate", "otherProps", "React"]
}
