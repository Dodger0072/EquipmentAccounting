{
  "version": 3,
  "sources": ["../../@consta/src/components/Modal/Modal.tsx"],
  "sourcesContent": ["import './Modal.css';\n\nimport React, { useEffect, useRef } from 'react';\nimport { Transition } from 'react-transition-group';\n\nimport {\n  PortalWithTheme,\n  usePortalContext,\n} from '##/components/PortalWithTheme';\nimport { useTheme } from '##/components/Theme/Theme';\nimport { useClickOutside } from '##/hooks/useClickOutside';\nimport { useGlobalKeys } from '##/hooks/useGlobalKeys';\nimport { animateTimeout, cnMixPopoverAnimate } from '##/mixs/MixPopoverAnimate';\nimport { cnMixScrollBar } from '##/mixs/MixScrollBar';\nimport { cn } from '##/utils/bem';\nimport { PropsWithHTMLAttributes } from '##/utils/types/PropsWithHTMLAttributes';\n\nconst modalPropWidth = ['auto'] as const;\ntype ModalPropWidth = typeof modalPropWidth[number];\nconst modalPropWidthDefault: ModalPropWidth = modalPropWidth[0];\n\nconst modalPropPosition = ['center', 'top'] as const;\ntype ModalPropPosition = typeof modalPropPosition[number];\nconst modalPropPositionDefault: ModalPropPosition = modalPropPosition[0];\n\ntype ModalProps = PropsWithHTMLAttributes<\n  {\n    isOpen?: boolean;\n    onClose?: () => void;\n    onOpen?: () => void;\n    hasOverlay?: boolean;\n    /** @deprecated use onClickOutside */\n    onOverlayClick?: (event: MouseEvent) => void;\n    onClickOutside?: (event: MouseEvent) => void;\n    onEsc?: (event: KeyboardEvent) => void;\n    rootClassName?: string;\n    width?: ModalPropWidth;\n    position?: ModalPropPosition;\n    children?: React.ReactNode;\n    container?: HTMLDivElement | undefined;\n    afterClose?: () => void;\n    refsForExcludeClickOutside?: React.RefObject<HTMLElement>[];\n  },\n  HTMLDivElement\n>;\n\nconst cnModal = cn('Modal');\n\n/**\n * Подписчик на PortalWithThemeProvider\n * получает рефы всех вложенных порталов в модалку\n * для дальнейшего исключения их из useClickOutside\n */\nconst ContextConsumer: React.FC<{\n  onClickOutside?: (event: MouseEvent) => void;\n  ignoreClicksInsideRefs?: ReadonlyArray<React.RefObject<HTMLElement>>;\n  children: React.ReactNode;\n}> = ({ onClickOutside, children, ignoreClicksInsideRefs }) => {\n  const { refs } = usePortalContext();\n\n  useClickOutside({\n    isActive: !!onClickOutside,\n    ignoreClicksInsideRefs: [\n      ...(ignoreClicksInsideRefs || []),\n      ...(refs || []),\n    ],\n    handler: onClickOutside,\n  });\n\n  return children as React.ReactElement;\n};\n\nexport const Modal: React.FC<ModalProps> = (props) => {\n  const {\n    isOpen,\n    onClose,\n    onOpen,\n    hasOverlay = true,\n    onOverlayClick,\n    onClickOutside,\n    onEsc,\n    className,\n    width = modalPropWidthDefault,\n    position = modalPropPositionDefault,\n    children,\n    container = window.document.body,\n    refsForExcludeClickOutside,\n    rootClassName,\n    afterClose,\n    style,\n    ...otherProps\n  } = props;\n\n  const ref = useRef<HTMLDivElement | null>(null);\n  const portalRef = useRef<HTMLDivElement | null>(null);\n  const { theme } = useTheme();\n\n  useEffect(() => {\n    if (isOpen) {\n      onOpen?.();\n    } else {\n      onClose?.();\n    }\n  }, [isOpen]);\n\n  useGlobalKeys({\n    Escape: (e: KeyboardEvent) => isOpen && onEsc && onEsc(e),\n  });\n\n  return (\n    <Transition\n      in={isOpen}\n      unmountOnExit\n      nodeRef={portalRef}\n      timeout={animateTimeout}\n      onExited={afterClose}\n    >\n      {(animate) => (\n        <PortalWithTheme\n          preset={theme}\n          container={container}\n          className={cnModal({ hasOverlay }, [rootClassName])}\n          ref={portalRef}\n          style={\n            typeof style?.zIndex === 'number'\n              ? { zIndex: style.zIndex }\n              : undefined\n          }\n        >\n          {hasOverlay && (\n            <div\n              className={cnModal('Overlay', { animate })}\n              aria-label=\"Overlay\"\n            />\n          )}\n          <div\n            {...otherProps}\n            style={{\n              ...style,\n              zIndex: undefined,\n            }}\n            className={cnModal('Window', { width, position }, [\n              cnMixPopoverAnimate({ animate }),\n              className,\n              cnMixScrollBar(),\n            ])}\n            ref={ref}\n          >\n            <ContextConsumer\n              onClickOutside={onClickOutside || onOverlayClick}\n              ignoreClicksInsideRefs={[\n                ...(refsForExcludeClickOutside || []),\n                ref,\n              ]}\n            >\n              {children}\n            </ContextConsumer>\n          </div>\n        </PortalWithTheme>\n      )}\n    </Transition>\n  );\n};\n"],
  "mappings": "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",
  "names": ["modalPropWidth", "modalPropWidthDefault", "modalPropPosition", "modalPropPositionDefault", "cnModal", "cn", "ContextConsumer", "onClickOutside", "children", "ignoreClicksInsideRefs", "usePortalContext", "refs", "useClickOutside", "isActive", "handler", "Modal", "props", "isOpen", "onClose", "onOpen", "hasOverlay", "onOverlayClick", "onEsc", "className", "width", "position", "container", "window", "document", "body", "refsForExcludeClickOutside", "rootClassName", "afterClose", "style", "otherProps", "ref", "useRef", "portalRef", "useTheme", "theme", "useEffect", "useGlobalKeys", "Escape", "e", "React", "animateTimeout", "animate", "zIndex", "cnMixPopoverAnimate", "cnMixScrollBar"]
}
