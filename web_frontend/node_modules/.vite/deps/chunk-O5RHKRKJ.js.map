{
  "version": 3,
  "sources": ["../../@consta/src/icons/IconSelect/IconSelect_size_m.tsx", "../../@consta/src/icons/IconSelect/IconSelect_size_s.tsx", "../../@consta/src/icons/IconSelect/IconSelect_size_xs.tsx", "../../@consta/src/icons/IconSelect/props.tsx", "../../@consta/src/icons/IconSelect/svg.tsx", "../../@consta/src/icons/IconSelect/IconSelect.tsx", "../../@consta/src/components/FieldCaption/FieldCaption.tsx", "../../@consta/src/components/FieldLabel/FieldLabel.tsx", "../../@consta/src/mixs/MixSpace/MixSpace.tsx", "../../@consta/src/utils/type-guards.ts"],
  "sourcesContent": ["import * as React from 'react';\nimport { SVGProps } from 'react';\n\nconst IconSelectSizeM = (props: SVGProps<SVGSVGElement>) => (\n  <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path d=\"m6.5 9 5.5 6 5.5-6h-11z\" />\n  </svg>\n);\nexport default IconSelectSizeM;\n", "import * as React from 'react';\nimport { SVGProps } from 'react';\n\nconst IconSelectSizeS = (props: SVGProps<SVGSVGElement>) => (\n  <svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path d=\"M3.5 5 8 10l4.5-5h-9z\" />\n  </svg>\n);\nexport default IconSelectSizeS;\n", "import * as React from 'react';\nimport { SVGProps } from 'react';\n\nconst IconSelectSizeXs = (props: SVGProps<SVGSVGElement>) => (\n  <svg viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path d=\"M6 8.5 10 4H2l4 4.5z\" />\n  </svg>\n);\nexport default IconSelectSizeXs;\n", "import { CreateIconArguments } from '##/icons/Icon/helpers';\n\nimport IconSelectSizeM from './IconSelect_size_m';\nimport IconSelectSizeS from './IconSelect_size_s';\nimport IconSelectSizeXs from './IconSelect_size_xs';\n\nconst props: CreateIconArguments = {\n  l: IconSelectSizeM,\n  m: IconSelectSizeM,\n  s: IconSelectSizeS,\n  xs: IconSelectSizeXs,\n  name: 'IconSelect',\n  renderType: { l: 'use', m: 'use', s: 'use', xs: 'use' },\n  color: 'mono',\n};\n\nexport default props;\n", "import { createSvg } from '##/icons/Icon/createSvg';\n\nimport props from './props';\n\nexport default createSvg(props);\n", "import { createIconInner } from '##/icons/Icon/createIconInner';\n\nimport props from './props';\nimport svg from './svg';\n\nexport const IconSelect = createIconInner(props, svg);\n", "import React from 'react';\n\nimport { cn } from '../../utils/bem';\nimport { forwardRefWithAs } from '../../utils/types/PropsWithAsAttributes';\nimport { Text } from '../Text/Text';\n\nexport type FieldCaptionPropStatus = 'alert' | 'warning' | 'success';\n\ntype FieldCaptionProps = {\n  status?: FieldCaptionPropStatus;\n};\n\nconst cnFieldCaption = cn('FieldCaption');\n\nexport const FieldCaption = forwardRefWithAs<FieldCaptionProps>(\n  (props, ref) => {\n    const { status, children, className, ...otherProps } = props;\n\n    return (\n      <Text\n        {...otherProps}\n        view={status || 'secondary'}\n        className={cnFieldCaption(null, [className])}\n        ref={ref}\n        size=\"xs\"\n        lineHeight=\"2xs\"\n      >\n        {children}\n      </Text>\n    );\n  },\n);\n", "import './FieldLabel.css';\n\nimport { IconComponent, IconPropSize } from '@consta/icons/Icon';\nimport React from 'react';\n\nimport { cnMixSpace, Space } from '##/mixs/MixSpace';\n\nimport { cn } from '../../utils/bem';\nimport { forwardRefWithAs } from '../../utils/types/PropsWithAsAttributes';\nimport { Text } from '../Text/Text';\n\nexport type FieldLabelPropSize = 'xs' | 's' | 'm' | 'l';\n\ntype FieldLabelProps = {\n  icon?: IconComponent;\n  size?: FieldLabelPropSize;\n  required?: boolean;\n};\n\nconst cnFieldLabel = cn('FieldLabel');\n\nconst iconSizeMap: Record<FieldLabelPropSize, IconPropSize> = {\n  xs: 'xs',\n  s: 's',\n  m: 's',\n  l: 's',\n};\n\nconst iconSpaceMap: Record<FieldLabelPropSize, Space> = {\n  xs: '2xs',\n  s: '2xs',\n  m: '2xs',\n  l: 'xs',\n};\n\nexport const FieldLabel = forwardRefWithAs<FieldLabelProps>((props, ref) => {\n  const {\n    className,\n    required,\n    children,\n    icon: Icon,\n    size = 'm',\n    ...otherProps\n  } = props;\n\n  return (\n    <Text\n      {...otherProps}\n      size={size}\n      view=\"secondary\"\n      lineHeight=\"m\"\n      className={cnFieldLabel(null, [className])}\n      ref={ref}\n    >\n      {children}\n      {required && <span className={cnFieldLabel('Star')}>*</span>}\n      {Icon && (\n        <Icon\n          className={cnFieldLabel('Icon', [\n            cnMixSpace({ mL: iconSpaceMap[size] }),\n          ])}\n          size={iconSizeMap[size]}\n          view=\"secondary\"\n        />\n      )}\n    </Text>\n  );\n});\n", "import './MixSpace.css';\n\nimport { cn } from '##/utils/bem';\n\nexport type Space =\n  | 0\n  | 'auto'\n  | 'm'\n  | '3xs'\n  | '2xs'\n  | 'xs'\n  | 's'\n  | 'l'\n  | 'xl'\n  | '2xl'\n  | '3xl'\n  | '4xl'\n  | '5xl'\n  | '6xl';\n\nexport type MixSpaceProps = {\n  p?: Space;\n  m?: Space;\n  pV?: Space;\n  pH?: Space;\n  mV?: Space;\n  mH?: Space;\n  mT?: Space;\n  mL?: Space;\n  mR?: Space;\n  mB?: Space;\n  pT?: Space;\n  pL?: Space;\n  pR?: Space;\n  pB?: Space;\n};\n\ntype CnMixSpace = (props: MixSpaceProps) => string;\n\nconst cnSpace = cn('MixSpace');\n\nexport const cnMixSpace: CnMixSpace = ({\n  p,\n  m,\n  pV,\n  pH,\n  mV,\n  mH,\n  mT,\n  mL,\n  mR,\n  mB,\n  pT,\n  pL,\n  pR,\n  pB,\n}) =>\n  cnSpace({\n    pT: pT || pV || p,\n    pL: pL || pH || p,\n    pR: pR || pH || p,\n    pB: pB || pV || p,\n    mT: mT || mV || m,\n    mL: mL || mH || m,\n    mR: mR || mH || m,\n    mB: mB || mV || m,\n  });\n", "export const isDefined = <T>(p: T): p is Exclude<T, undefined> =>\n  p !== undefined;\n\nexport const isNotNil = <T>(p: T): p is Exclude<T, undefined | null> =>\n  p !== undefined && p !== null;\n\nexport const isNumber = (value: unknown): value is number =>\n  typeof value === 'number';\n\nexport const isString = (value: unknown): value is string =>\n  typeof value === 'string';\n"],
  "mappings": "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",
  "names": ["IconSelectSizeM", "props", "React", "IconSelectSizeS", "props", "React", "IconSelectSizeXs", "props", "props", "l", "IconSelectSizeM", "m", "s", "IconSelectSizeS", "xs", "IconSelectSizeXs", "name", "renderType", "color", "createSvg", "props", "IconSelect", "createIconInner", "props", "svg", "cnFieldCaption", "cn", "FieldCaption", "forwardRefWithAs", "props", "ref", "status", "children", "className", "otherProps", "React", "import_react", "cnSpace", "cn", "cnMixSpace", "p", "m", "pV", "pH", "mV", "mH", "mT", "mL", "mR", "mB", "pT", "pL", "pR", "pB", "cnFieldLabel", "cn", "iconSizeMap", "xs", "s", "m", "l", "iconSpaceMap", "FieldLabel", "forwardRefWithAs", "props", "ref", "className", "required", "children", "Icon", "icon", "size", "otherProps", "_excluded", "React", "cnMixSpace", "mL", "isNotNil", "p", "isNumber", "value", "isString"]
}
