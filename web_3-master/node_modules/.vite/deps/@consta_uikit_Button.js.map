{
  "version": 3,
  "sources": ["../../@consta/src/components/Button/Button.tsx"],
  "sourcesContent": ["import './Button.css';\n\nimport { IconComponent, IconPropSize } from '@consta/icons/Icon';\nimport React, { HTMLProps, useRef } from 'react';\n\nimport { useForkRef } from '../../hooks/useForkRef/useForkRef';\nimport { cnMixFocus } from '../../mixs/MixFocus/MixFocus';\nimport { cn } from '../../utils/bem';\nimport { getByMap } from '../../utils/getByMap';\nimport { forwardRefWithAs } from '../../utils/types/PropsWithAsAttributes';\nimport { usePropsHandler } from '../EventInterceptor/usePropsHandler';\nimport { Loader } from '../LoaderDeprecated/LoaderDeprecated';\n\nexport const buttonPropSize = ['m', 'xs', 's', 'l'] as const;\nexport type ButtonPropSize = typeof buttonPropSize[number];\nexport const buttonPropSizeDefault: ButtonPropSize = buttonPropSize[0];\n\nexport const buttonPropView = [\n  'primary',\n  'clear',\n  'ghost',\n  'secondary',\n] as const;\nexport type ButtonPropView = typeof buttonPropView[number];\nexport const buttonPropViewDefault: ButtonPropView = buttonPropView[0];\n\nexport const buttonPropWidth = ['default', 'full'] as const;\nexport type ButtonPropWidth = typeof buttonPropWidth[number];\nexport const buttonPropWidthDefault: ButtonPropWidth = buttonPropWidth[0];\n\nexport const buttonPropForm = [\n  'default',\n  'brick',\n  'round',\n  'brickRound',\n  'roundBrick',\n  'brickDefault',\n  'defaultBrick',\n] as const;\n\nexport type ButtonPropForm = typeof buttonPropForm[number];\n\ntype GlobalForm =\n  | 'default'\n  | 'brick'\n  | 'round'\n  | 'brickRound'\n  | 'roundBrick'\n  | 'brickDefault'\n  | 'defaultBrick'\n  | 'defaultClear'\n  | 'brickClear'\n  | 'roundClear'\n  | 'clearRound'\n  | 'clearDefault'\n  | 'clearBrick'\n  | 'clearClear';\n\nconst mapStableForm: Record<GlobalForm, ButtonPropForm> = {\n  default: 'default',\n  defaultClear: 'defaultBrick',\n  defaultBrick: 'defaultBrick',\n  brick: 'brick',\n  brickDefault: 'brickDefault',\n  brickClear: 'brick',\n  brickRound: 'brickRound',\n  round: 'round',\n  roundClear: 'roundBrick',\n  roundBrick: 'roundBrick',\n  clearRound: 'brickRound',\n  clearDefault: 'brickDefault',\n  clearBrick: 'brick',\n  clearClear: 'brick',\n};\n\nexport const buttonPropFormDefault = buttonPropForm[0];\n\nexport type Props = {\n  size?: ButtonPropSize;\n  view?: ButtonPropView;\n  width?: ButtonPropWidth;\n  form?: ButtonPropForm;\n  tabIndex?: number;\n  disabled?: boolean;\n  loading?: boolean;\n  label?: string | number;\n  onClick?: React.EventHandler<React.MouseEvent>;\n  iconLeft?: IconComponent;\n  iconRight?: IconComponent;\n  onlyIcon?: boolean;\n  iconSize?: IconPropSize;\n  title?: string;\n  children?: never;\n  type?: 'button' | 'reset' | 'submit';\n  formId?: HTMLProps<HTMLButtonElement>['form'];\n};\n\nexport const COMPONENT_NAME = 'Button' as const;\nexport const cnButton = cn(COMPONENT_NAME);\n\nconst sizeMap: Record<ButtonPropSize, IconPropSize> = {\n  xs: 'xs',\n  s: 'xs',\n  m: 's',\n  l: 'm',\n};\n\nconst sizeMapOnlyIcon: Record<ButtonPropSize, IconPropSize> = {\n  xs: 'xs',\n  s: 's',\n  m: 'm',\n  l: 'm',\n};\n\nexport const Button = forwardRefWithAs<Props, 'button'>((props, ref) => {\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n\n  const {\n    size = buttonPropSizeDefault,\n    view = buttonPropViewDefault,\n    width = buttonPropWidthDefault,\n    form = buttonPropFormDefault,\n    iconLeft,\n    iconRight,\n    label,\n    className,\n    onClick,\n    disabled,\n    loading,\n    type = 'button',\n    tabIndex,\n    as = 'button',\n    onlyIcon,\n    iconSize: iconSizeProp,\n    formId,\n    ...otherProps\n  } = usePropsHandler(COMPONENT_NAME, props, buttonRef);\n\n  const Tag = as as string;\n  const IconOnly = (!label || onlyIcon) && (iconLeft || iconRight);\n  const IconLeft = iconLeft;\n  const IconRight = iconRight;\n  const withIcon = !!iconLeft || !!iconRight;\n  const title = props.title || (!!IconOnly && label) || undefined;\n  const iconSize = IconOnly\n    ? getByMap(sizeMapOnlyIcon, size, iconSizeProp)\n    : getByMap(sizeMap, size, iconSizeProp);\n\n  const handleClick = (e: React.MouseEvent<HTMLElement>) => {\n    if (!disabled && !loading && onClick) {\n      onClick(e);\n    }\n  };\n\n  return (\n    <Tag\n      {...otherProps}\n      onClick={onClick ? handleClick : undefined}\n      form={formId}\n      type={type}\n      className={cnButton(\n        {\n          size,\n          view,\n          width,\n          form: mapStableForm[form],\n          loading,\n          disabled,\n          withIcon,\n          onlyIcon: !!IconOnly,\n        },\n        [!(disabled || loading) ? cnMixFocus() : undefined, className],\n      )}\n      disabled={disabled}\n      tabIndex={tabIndex}\n      title={title}\n      ref={useForkRef([ref, buttonRef])}\n    >\n      {IconOnly && <IconOnly className={cnButton('Icon')} size={iconSize} />}\n      {!IconOnly &&\n        ((IconLeft || IconRight) && label ? (\n          <>\n            {IconLeft && (\n              <IconLeft\n                className={cnButton('Icon', { position: 'left' })}\n                size={iconSize}\n              />\n            )}\n            <span className={cnButton('Label')}>{label}</span>\n            {IconRight && (\n              <IconRight\n                className={cnButton('Icon', { position: 'right' })}\n                size={iconSize}\n              />\n            )}\n          </>\n        ) : (\n          label\n        ))}\n      {loading && <Loader className={cnButton('Loader')} size=\"s\" />}\n    </Tag>\n  );\n});\n"],
  "mappings": "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",
  "names": ["buttonPropSize", "buttonPropSizeDefault", "buttonPropView", "buttonPropViewDefault", "buttonPropWidth", "buttonPropWidthDefault", "buttonPropForm", "mapStableForm", "defaultClear", "defaultBrick", "brick", "brickDefault", "brickClear", "brickRound", "round", "roundClear", "roundBrick", "clearRound", "clearDefault", "clearBrick", "clearClear", "buttonPropFormDefault", "COMPONENT_NAME", "cnButton", "cn", "sizeMap", "xs", "s", "m", "l", "sizeMapOnlyIcon", "Button", "forwardRefWithAs", "props", "ref", "buttonRef", "useRef", "usePropsHandler", "size", "view", "width", "form", "iconLeft", "iconRight", "label", "className", "onClick", "disabled", "loading", "type", "tabIndex", "as", "onlyIcon", "iconSizeProp", "iconSize", "formId", "otherProps", "IconOnly", "IconLeft", "IconRight", "title", "getByMap", "React", "handleClick", "e", "withIcon", "cnMixFocus", "useForkRef", "position"]
}
