import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@consta/uikit/__internal__/src/hooks/useForkRef/useForkRef.js
var import_react = __toESM(require_react());

// node_modules/@consta/uikit/__internal__/src/utils/setRef.js
function setRef(a, b) {
  "function" == typeof a ? a(b) : a && (a.current = b);
}

// node_modules/@consta/uikit/__internal__/src/hooks/useForkRef/useForkRef.js
function _createForOfIteratorHelper(a, b) {
  var c = "undefined" != typeof Symbol && a[Symbol.iterator] || a["@@iterator"];
  if (!c) {
    if (Array.isArray(a) || (c = _unsupportedIterableToArray(a)) || b && a && "number" == typeof a.length) {
      c && (a = c);
      var d = 0, e = function() {
      };
      return { s: e, n: function n() {
        return d >= a.length ? { done: true } : { done: false, value: a[d++] };
      }, e: function e2(a2) {
        throw a2;
      }, f: e };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var f, g = true, h = false;
  return { s: function s() {
    c = c.call(a);
  }, n: function n() {
    var a2 = c.next();
    return g = a2.done, a2;
  }, e: function e2(a2) {
    h = true, f = a2;
  }, f: function f2() {
    try {
      g || null == c["return"] || c["return"]();
    } finally {
      if (h) throw f2;
    }
  } };
}
function _unsupportedIterableToArray(a, b) {
  if (a) {
    if ("string" == typeof a) return _arrayLikeToArray(a, b);
    var c = Object.prototype.toString.call(a).slice(8, -1);
    return "Object" === c && a.constructor && (c = a.constructor.name), "Map" === c || "Set" === c ? Array.from(a) : "Arguments" === c || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c) ? _arrayLikeToArray(a, b) : void 0;
  }
}
function _arrayLikeToArray(a, b) {
  (null == b || b > a.length) && (b = a.length);
  for (var c = 0, d = Array(b); c < b; c++) d[c] = a[c];
  return d;
}
var forkRef = function(a) {
  return a.length ? function(b) {
    var c, d = _createForOfIteratorHelper(a);
    try {
      for (d.s(); !(c = d.n()).done; ) {
        var e = c.value;
        setRef(e, b);
      }
    } catch (a2) {
      d.e(a2);
    } finally {
      d.f();
    }
  } : null;
};
var useForkRef = function(a) {
  return (0, import_react.useMemo)(function() {
    return forkRef(a);
  }, [a]);
};

export {
  forkRef,
  useForkRef
};
//# sourceMappingURL=chunk-EDELJFTB.js.map
